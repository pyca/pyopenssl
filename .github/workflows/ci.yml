name: CI
on:
  pull_request: {}
  push: {}

jobs:
  linux:
    runs-on: ${{ matrix.PYTHON.OS || 'ubuntu-22.04' }}
    strategy:
      fail-fast: false
      matrix:
        PYTHON:
          # Base builds
          - {VERSION: "3.7", NOXSESSION: "tests"}
          - {VERSION: "3.8", NOXSESSION: "tests"}
          - {VERSION: "3.9", NOXSESSION: "tests"}
          - {VERSION: "3.10", NOXSESSION: "tests"}
          - {VERSION: "3.11", NOXSESSION: "tests"}
          - {VERSION: "3.12", NOXSESSION: "tests"}
          - {VERSION: "3.13-dev", NOXSESSION: "tests"}
          - {VERSION: "pypy-3.9", NOXSESSION: "tests"}
          - {VERSION: "pypy-3.10", NOXSESSION: "tests"}
          - {VERSION: "3.11", NOXSESSION: "tests-wheel", OS: "windows-2022"}
          # -cryptography-main
          - {VERSION: "3.8", NOXSESSION: "tests-cryptography-main"}
          - {VERSION: "3.9", NOXSESSION: "tests-cryptography-main"}
          - {VERSION: "3.10", NOXSESSION: "tests-cryptography-main"}
          - {VERSION: "3.11", NOXSESSION: "tests-cryptography-main"}
          - {VERSION: "3.12", NOXSESSION: "tests-cryptography-main"}
          - {VERSION: "3.13-dev", NOXSESSION: "tests-cryptography-main"}
          - {VERSION: "pypy-3.9", NOXSESSION: "tests-cryptography-main"}
          - {VERSION: "pypy-3.10", NOXSESSION: "tests-cryptography-main"}
          # -cryptography-minimum
          - {VERSION: "3.7", NOXSESSION: "tests-cryptography-minimum"}
          - {VERSION: "3.8", NOXSESSION: "tests-cryptography-minimum"}
          - {VERSION: "3.9", NOXSESSION: "tests-cryptography-minimum"}
          - {VERSION: "3.10", NOXSESSION: "tests-cryptography-minimum"}
          - {VERSION: "3.11", NOXSESSION: "tests-cryptography-minimum"}
          - {VERSION: "3.12", NOXSESSION: "tests-cryptography-minimum"}
          - {VERSION: "3.13-dev", NOXSESSION: "tests-cryptography-minimum"}
          - {VERSION: "pypy-3.10", NOXSESSION: "tests-cryptography-minimum"}
          # Cryptography wheels
          - {VERSION: "3.9", NOXSESSION: "tests-cryptography-minimum-wheel"}
          - {VERSION: "3.9", NOXSESSION: "tests-wheel"}
          # Random order
          - {VERSION: "3.9", NOXSESSION: "tests-random-order"}
          # Meta
          - {VERSION: "3.9", NOXSESSION: "check-manifest"}
          - {VERSION: "3.11", NOXSESSION: "lint"}
          - {VERSION: "3.13", NOXSESSION: "mypy"}
          - {VERSION: "3.9", NOXSESSION: "docs"}
    steps:
      - uses: actions/checkout@v5
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYTHON.VERSION }}
      - run: python -m pip install nox
      - run: nox
        env:
          NOXSESSION: ${{ matrix.PYTHON.NOXSESSION }}
      - uses: ./.github/actions/upload-coverage

  linux-docker:
    runs-on: ubuntu-latest
    container: ghcr.io/pyca/cryptography-runner-${{ matrix.TEST.CONTAINER }}
    strategy:
      fail-fast: false
      matrix:
        TEST:
          # cryptography-main used since there's no wheel
          - {CONTAINER: "ubuntu-rolling", NOXSESSION: "tests-cryptography-main"}
    name: "${{ matrix.TEST.NOXSESSION }} on ${{ matrix.TEST.CONTAINER }}"
    steps:
      - uses: actions/checkout@v5
      - run: /venv/bin/pip install nox
      - run: /venv/bin/nox
        env:
          RUSTUP_HOME: /root/.rustup
          NOXSESSION: ${{ matrix.TEST.NOXSESSION }}
      - uses: ./.github/actions/upload-coverage

  linux-downstream:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        DOWNSTREAM:
          - twisted
          - certbot
          - certbot-josepy
        PYTHON:
          - 3.12
    name: "Downstream tests for ${{ matrix.DOWNSTREAM }}"
    steps:
      - uses: actions/checkout@v5
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYTHON }}
      - run: ./.github/downstream.d/${{ matrix.DOWNSTREAM }}.sh install
      - run: pip install .
      - run: ./.github/downstream.d/${{ matrix.DOWNSTREAM }}.sh run

  all-green:
    runs-on: ubuntu-latest
    needs: [linux, linux-docker, linux-downstream]
    if: ${{ always() }}
    timeout-minutes: 3
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@05ac9388f0aebcb5727afa17fcccfecd6f8ec5fe # v1.2.2
        with:
          jobs: ${{ toJSON(needs) }}

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        timeout-minutes: 3
        with:
          persist-credentials: false
      - name: Setup python
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          python-version: '3.12'
        timeout-minutes: 3
      - run: pip install coverage[toml]
      - name: Download coverage data
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: coverage-data-*
          merge-multiple: true
      - name: Combine coverage and fail if it's too low
        id: combinecoverage
        run: |
          set +e
          python -m coverage combine
          echo "## Python Coverage" >> $GITHUB_STEP_SUMMARY
          python -m coverage report -m --fail-under=98 > COV_REPORT
          COV_EXIT_CODE=$?
          cat COV_REPORT
          if [ $COV_EXIT_CODE -ne 0 ]; then
            echo "ðŸš¨ Python Coverage failed. Coverage too low." | tee -a $GITHUB_STEP_SUMMARY
          fi
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat COV_REPORT >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          exit $COV_EXIT_CODE
      - name: Create coverage HTML
        run: python -m coverage html
        if: ${{ failure() && steps.combinecoverage.outcome == 'failure' }}
      - name: Upload HTML report.
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: _html-report
          path: htmlcov
          if-no-files-found: ignore
